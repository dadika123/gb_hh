# Generated by Django 3.2.10 on 2022-02-24 16:16

import accounts.models
from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('cities_light', '0011_auto_20220210_1623'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'Модератор'), (1, 'Соискатель'), (2, 'Работодатель')], db_index=True, default=1, verbose_name='Статус пользователя')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars', verbose_name='аватар')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'пользователя',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', accounts.models.AccountManager()),
                ('seeker', accounts.models.JobSeekerManager()),
                ('employer', accounts.models.EmployerManager()),
            ],
        ),
        migrations.CreateModel(
            name='JobSeeker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, db_index=True, max_length=150, verbose_name='Имя')),
                ('patronymic', models.CharField(blank=True, default='', max_length=20, verbose_name='Отчество')),
                ('last_name', models.CharField(blank=True, db_index=True, max_length=150, verbose_name='Фамилия')),
                ('date_birth', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('sex', models.BooleanField(blank=True, choices=[(None, 'не выбрано'), (0, 'Женщина'), (1, 'Мужчина')], null=True, verbose_name='Пол')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Телефон')),
                ('address', models.TextField(blank=True, verbose_name='адрес')),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='cities_light.city', verbose_name='город проживания')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='cities_light.country', verbose_name='страна проживания')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='seeker', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'соискателя',
                'verbose_name_plural': 'Соискатели',
            },
            managers=[
                ('objects', accounts.models.JobSeekerManager()),
            ],
        ),
        migrations.CreateModel(
            name='Employer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, db_index=True, max_length=500, null=True, verbose_name='название компании')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='телефон')),
                ('address', models.TextField(blank=True, verbose_name='штаб квартира')),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='cities_light.city', verbose_name='город')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='cities_light.country', verbose_name='страна')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='employer', to=settings.AUTH_USER_MODEL, verbose_name='Работодатель')),
            ],
            options={
                'verbose_name': 'работодателя',
                'verbose_name_plural': 'Работодатели',
            },
            managers=[
                ('objects', accounts.models.EmployerManager()),
            ],
        ),
    ]
